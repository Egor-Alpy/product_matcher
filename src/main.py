import asyncio
import uvicorn
import time

from contextlib import asynccontextmanager
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

from src.config.config import settings
from src.core.logger import get_logger
from src.api.router import router
from src.services.elastic import elastic_search

logger = get_logger(name=__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    logger.debug("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Elasticsearch —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    elasticsearch_connected = False
    max_startup_retries = 10
    startup_delay = 3

    logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Elasticsearch...")
    time.sleep(startup_delay)  # –î–∞–µ–º –≤—Ä–µ–º—è Elasticsearch –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è

    logger.info("üéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")

    try:
        yield
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        raise
    finally:
        logger.info("üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Elasticsearch
        if elastic_search.es:
            try:
                elastic_search.es.close()
                logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Elasticsearch –∑–∞–∫—Ä—ã—Ç–æ")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Elasticsearch: {e}")

        logger.info("üëã –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")


app = FastAPI(
    title=settings.PROJECT_NAME,
    description=settings.PROJECT_DESC,
    version=settings.PROJECT_VERSION,
    lifespan=lifespan
)

# –î–æ–±–∞–≤–ª—è–µ–º CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
app.include_router(router)


def main():
    try:
        logger.info(f"üöÄ {settings.PROJECT_NAME} –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        logger.info(f"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
        logger.info(f"   - API: {settings.API_HOST}:{settings.API_PORT}")
        logger.info(f"   - Elasticsearch: http://{settings.ELASTICSEARCH_HOST}:{settings.ELASTICSEARCH_PORT}")
        logger.info(f"   - MongoDB: {settings.get_mongo_connection_link}")

        uvicorn.run(
            app=settings.API_APP,
            host=settings.API_HOST,
            port=settings.API_PORT,
            log_level=settings.API_LOG_LEVEL
        )
    except Exception as e:
        logger.error(f'‚ùå {settings.PROJECT_NAME} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}')


if __name__ == "__main__":
    main()